{
  "connectorClass": "org.apache.kafka.connect.mirror.MirrorCheckpointConnector",
  "configOverrides": [
    {
      "nameSelector": "name",
      "definition": {
        "group" : "Connector name"
      }
    },

    {
      "nameSelector": "groups",
      "definition": {
        "display_name": "Consumer Groups",
        "group" : "Consumer Groups",
        "order": 1
      }
    },
    {
      "nameSelector": "groups.exclude",
      "definition": {
        "display_name": "Exclude Groups",
        "group" : "Consumer Groups",
        "importance": "MEDIUM",
        "order": 2
      }
    },
    {
      "nameSelector": "topics",
      "definition": {
        "display_name": "Topics",
        "group" : "Consumer Groups",
        "order": 3
      }
    },
    {
      "nameSelector": "topics.exclude",
      "definition": {
        "display_name": "Excluded topics",
        "group" : "Consumer Groups",
        "importance": "MEDIUM",
        "order": 4
      }
    },
    {
      "nameSelector": "refresh.groups.enabled",
      "definition": {
        "display_name": "Check for new groups",
        "group" : "Consumer Groups",
        "importance": "MEDIUM",
        "order": 5
      }
    },
    {
      "nameSelector": "refresh.groups.interval.seconds",
      "definition": {
        "display_name": "Frequency of group refresh",
        "group" : "Consumer Groups",
        "importance": "MEDIUM",
        "order": 6
      }
    },

    {
      "nameSelector": "refresh.topics.enabled",
      "definition": {
        "display_name": "Check for new topics",
        "group" : "Consumer Groups",
        "importance": "MEDIUM",
        "order": 7
      }
    },
    {
      "nameSelector": "refresh.topics.interval.seconds",
      "definition": {
        "display_name": "Frequency of topic refresh",
        "documentation": "Frequency of topic refresh in seconds.",
        "group" : "Consumer Groups",
        "importance": "MEDIUM",
        "order": 8
      }
    },

    
    {
      "nameSelector": "emit.checkpoints.enabled",
      "definition": {
        "display_name": "Translate consumer group offsets",
        "documentation" : "The connector will periodically fetch consumer offsets of source cluster, translate them into the ones that make sense in the target cluster (offsets can differ among clusters). This mapping is stored in an internal topic in the target cluster. Required for Consumer group offset sync. ",
        "group" : "Consumer Groups",
        "importance": "MEDIUM",
        "order": 9
      }
    },
    {
      "nameSelector": "emit.checkpoints.interval.seconds",
      "definition": {
        "display_name": "Frequency of offset translation",
        "documentation": "Frequency of consumer group offset translation in seconds",
        "group" : "Consumer Groups",
        "importance": "MEDIUM",
        "order": 10
      }
    },
    {
      "nameSelector": "checkpoints.topic.replication.factor",
      "definition": {
        "display_name": "Translated offset topic replication factor",
        "documentation": "Replication factor of the topic with translated consumer group offsets",
        "group" : "Consumer Groups",
        "importance": "MEDIUM",
        "order": 11
      }
    },

    {
      "nameSelector": "sync.group.offsets.enabled",
      "definition": {
        "display_name": "Consumer group offset sync",
        "documentation": "Enables seamless consumer switch to the target cluster. If enabled, it periodically updates consumer group offsets in target cluster as long as no active consumers of the group are connected to the target cluster. Requires enabling Translate consumer group offsets (emit.checkpoints.enabled).",
        "group" : "Consumer Groups",
        "importance": "HIGH",
        "order": 20
      }
    },
    {
      "nameSelector": "sync.group.offsets.interval.seconds",
      "definition": {
        "display_name": "Frequency of offset sync",
        "group" : "Consumer Groups",
        "importance": "MEDIUM",
        "order": 21
      }
    },



    {
      "nameSelector": "offset-syncs.topic.location",
      "definition": {
        "display_name": "Offset mapping topic location",
        "documentation" : "Placement of the internal topic that maps source cluster offset to target cluster offsets. Set the same value for both MirrorSourceConnector and MirrorCheckpointConnector. Valid values are source (default), target.",
        "group" : "Consumer Groups",
        "importance": "MEDIUM",
        "order": 30
      }
    },
    {
      "nameSelector": "offset-syncs.topic.replication.factor",
      "definition": {
        "display_name": "Offset mapping topic replication factor",
        "group" : "Consumer Groups",
        "importance": "MEDIUM",
        "order": 31
      }
    },

    {
      "nameSelector": "offset.lag.max",
      "definition": {
        "display_name": "Max offset lag",
        "group" : "Consumer Groups",
        "importance": "MEDIUM",
        "order": 40
      }
    },
    




    {
      "nameSelector": "replication.factor",
      "definition": {
        "display_name": "Replication factor",
        "custom_default_value": "3",
        "documentation": "Replication factor for newly created topics in Redpanda.",
        "group" : "Consumer Groups",
        "importance": "MEDIUM",
        "order": 50
      }
    },



    {
      "nameSelector": "tasks.max",
      "definition": {
        "display_name": "Max tasks",
        "group" : "Configuration",
        "importance": "MEDIUM"
      }
    },
    {
      "nameSelector": "replication.policy.class",
      "definition": {
        "display_name": "Replication policy",
        "custom_default_value": "org.apache.kafka.connect.mirror.IdentityReplicationPolicy",
        "group": "Configuration"
      }
    },
    {
      "nameSelector": "source.cluster.alias",
      "definition": {
        "custom_default_value": "source",
        "display_name": "Source cluster alias",
        "documentation": "When using org.apache.kafka.connect.mirror.DefaultReplicationPolicy, topic names will be prefixed with it.",
        "group": "Configuration",
        "importance": "MEDIUM"
      }
    },
    {
      "nameSelector": "target.cluster.alias",
      "definition": {
        "custom_default_value": "target",
        "display_name": "Target cluster alias",
        "group": "Configuration",
        "importance": "MEDIUM"
      }
    },

   
    {
      "nameSelector": "errors.tolerance",
      "definition": {
        "order": 1
      }
    },
    {
      "nameSelector": "errors.retry.timeout",
      "definition": {
        "order": 2,
        "width": "SHORT"
      }
    },
    {
      "nameSelector": "errors.retry.delay.max.ms",
      "definition": {
        "order": 3,
        "width": "SHORT"
      }
    }

  ],
  "configRemovals": [
    "/ssl.*/",
    "/sasl.*/",
    "enabled",
    "topics.blacklist",
    "groups.blacklist",
    "config.properties.blacklist",
    "topic.creation.groups",
    "predicates",
    "transforms",
    "errors.log.enable",
    "errors.log.include.messages",
    "topic.filter.class",
    "group.filter.class",
    "config.property.filter.class",
    "consumer.poll.timeout.ms",
    "admin.timeout.ms",
    "/emit.heartbeats.*/",
    "replication.policy.separator",
    "heartbeats.topic.replication.factor",
    "metric.reporters",
    "security.protocol",
    "config.action.reload",
    "/sync.topic.configs.*/",
    "/sync.topic.acls.*/",
    "config.properties.exclude",
    "replication.factor",
    "heartbeats.topic.replication.factor",
    "key.converter",
    "value.converter",
    "header.converter"
    
  ]
}