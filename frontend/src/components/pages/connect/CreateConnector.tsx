import React, { useState } from 'react';
import { PageComponent, PageInitHelper } from '../Page';
import { animProps } from '../../../utils/animationProps';
import { motion } from 'framer-motion';

import {
    ApiOutlined,
    DatabaseOutlined, SearchOutlined,
    SettingOutlined,
} from '@ant-design/icons';
import { Wizard, WizardStep } from '../../misc/Wizard';
import Card from '../../misc/Card';
import { DemoPage } from './dynamic-ui/components';

class CreateConnector extends PageComponent {
    initPage(p: PageInitHelper) {
        p.title = 'Create Connector';
        p.addBreadcrumb('Create Connector', '/create-connector');
    }

    render() {
        return (
            <motion.div {...animProps} style={{ margin: '0 1rem' }}>
                <Card>
                    <ConnectorWizard />
                </Card>
            </motion.div>
        );
    }
}

function ConnectorWizard() {
    const [currentStep, setCurrentStep] = useState(0);

    const steps: Array<WizardStep> = [
        {
            title: 'Connector Type',
            description: 'Choose type of connector.',
            icon: <DatabaseOutlined />,
            content: <DemoPage />,
            postConditionMet: () => true,
        }, {
            title: 'Properties',
            description: 'Configure basic connection properties.',
            icon: <ApiOutlined />,
            content: 'Autogenerated form...',
            postConditionMet: () => true,
        }, {
            title: 'Additional Properties',
            description: 'Add advanced connector configs, SMTs, etc.',
            icon: <SettingOutlined />,
            content: 'More config options...',
            postConditionMet: () => true,
        }, {
            title: 'Review',
            description: 'Review and optionally patch the created connector config.',
            icon: <SearchOutlined />,
            content: 'Review step...',
            postConditionMet: () => true,
        }];

    return <Wizard state={{
        canContinue: () => steps[currentStep].postConditionMet(),
        next: () => currentStep < steps.length - 1 ? setCurrentStep(n => n + 1) : undefined,
        previous: () => currentStep > 0 ? setCurrentStep(n => n - 1) : undefined,
        isLast: () => currentStep === steps.length - 1,
        isFirst: () => currentStep === 0,
        getCurrentStep: () => [currentStep, steps[currentStep]],
        getSteps: () => steps,
    }} />;
}

export default CreateConnector;
